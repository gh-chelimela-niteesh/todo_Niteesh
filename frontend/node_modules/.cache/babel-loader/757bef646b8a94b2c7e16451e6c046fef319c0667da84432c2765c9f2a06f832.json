{"ast":null,"code":"// // import React, { useState } from 'react';\n// // import TodoForm from './TodoForm';\n// // import TodoItem from './TodoItem';\n// // import { useNavigate } from \"react-router-dom\";\n\n// // function TodoApp() {\n// //   const [todos, setTodos] = useState([]);\n\n// //   const addTodo = (task) => {\n// //     setTodos([\n// //       ...todos,\n// //       {\n// //         id: Date.now(),\n// //         text: task.text,\n// //         priority: task.priority,\n// //         completed: false,\n// //       },\n// //     ]);\n// //   };\n// //   const navigate = useNavigate();\n\n// // const handleLogout = () => {\n// //   localStorage.removeItem(\"user\"); // optional: clear login state\n// //   navigate(\"/\"); // redirect to login page\n// // };\n\n// //   const toggleComplete = (id) => {\n// //     setTodos(todos.map((t) =>\n// //       t.id === id ? { ...t, completed: !t.completed } : t\n// //     ));\n// //   };\n\n// //   const deleteTodo = (id) => {\n// //     setTodos(todos.filter((t) => t.id !== id));\n// //   };\n\n// //   const editTodo = (id, updatedTask) => {\n// //     setTodos(todos.map((t) =>\n// //       t.id === id ? { ...t, text: updatedTask.text, priority: updatedTask.priority } : t\n// //     ));\n// //   };\n\n// //   const completedCount = todos.filter((t) => t.completed).length;\n// //   const pendingCount = todos.length - completedCount;\n\n// //   return (\n// //     <div className=\"min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 flex flex-col items-center px-4 py-10\">\n// //       <div className=\"bg-white/30 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-xl p-6 border border-slate-300\">\n// //         <h1 className=\"text-3xl font-semibold text-slate-800 mb-6 text-center\">🚀 Project Task Manager</h1>\n// //         <TodoForm onSubmit={addTodo} />\n// //         <div className=\"space-y-4\">\n// //           {todos.map((todo) => (\n// //             <TodoItem\n// //               key={todo.id}\n// //               todo={todo}\n// //               onToggle={toggleComplete}\n// //               onDelete={deleteTodo}\n// //               onEdit={editTodo}\n// //             />\n// //           ))}\n// //         </div>\n// //         <div className=\"mt-6 text-sm text-slate-700 flex justify-between\">\n// //           <span>📋 Total: {todos.length}</span>\n// //           <span>✅ Completed: {completedCount}</span>\n// //           <span>⏳ Pending: {pendingCount}</span>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default TodoApp;\n\n// import React, { useState, useEffect } from 'react';\n// import TodoForm from './TodoForm';\n// import TodoItem from './TodoItem';\n// import { useNavigate } from 'react-router-dom';\n\n// function TodoApp() {\n//   const [todos, setTodos] = useState([]);\n//   const navigate = useNavigate();\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\n//   const userEmail = user?.email;\n\n//   // 🟡 Load todos on mount\n//   useEffect(() => {\n//     if (!userEmail) {\n//       navigate('/');\n//       return;\n//     }\n//     fetch(`http://localhost:8080/api/todos/${userEmail}`)\n//       .then((res) => res.json())\n//       .then((data) => setTodos(data))\n//       .catch((err) => {\n//         console.error('Failed to load todos:', err);\n//         alert('Failed to load todos.');\n//       });\n//   }, [userEmail, navigate]);\n\n//   // ✅ Add todo\n//   const addTodo = (task) => {\n//     const newTodo = {\n//       text: task.text,\n//       priority: task.priority,\n//       completed: false,\n//     };\n\n//     fetch(`http://localhost:8080/api/todos/${userEmail}`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(newTodo),\n//     })\n//       .then((res) => res.text())\n//       .then(() => {\n//         // Refresh list\n//         setTodos([...todos, { ...newTodo, id: Date.now() }]); // temp id\n//       });\n//   };\n\n//   // ✅ Toggle complete\n//   const toggleComplete = (id) => {\n//     const todo = todos.find((t) => t.id === id);\n//     const updated = { ...todo, completed: !todo.completed };\n\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\n//       method: 'PUT',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(updated),\n//     }).then(() =>\n//       setTodos(todos.map((t) => (t.id === id ? updated : t)))\n//     );\n//   };\n\n//   // ✅ Delete todo\n//   const deleteTodo = (id) => {\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\n//       method: 'DELETE',\n//     }).then(() => setTodos(todos.filter((t) => t.id !== id)));\n//   };\n\n//   // ✅ Edit todo\n//   const editTodo = (id, updatedTask) => {\n//     const updated = { ...todos.find((t) => t.id === id), ...updatedTask };\n\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\n//       method: 'PUT',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(updated),\n//     }).then(() =>\n//       setTodos(todos.map((t) => (t.id === id ? updated : t)))\n//     );\n//   };\n\n//   const completedCount = todos.filter((t) => t.completed).length;\n//   const pendingCount = todos.length - completedCount;\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('user');\n//     navigate('/');\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 flex flex-col items-center px-4 py-10\">\n//       <div className=\"bg-white/30 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-xl p-6 border border-slate-300\">\n//         <div className=\"flex justify-between items-center mb-6\">\n//           <h1 className=\"text-3xl font-semibold text-slate-800 text-center w-full\">🚀 Project Task Manager</h1>\n//           <button onClick={handleLogout} className=\"text-red-600 text-sm font-medium hover:underline absolute top-6 right-8\">\n//             Logout\n//           </button>\n//         </div>\n//         <TodoForm onSubmit={addTodo} />\n//         <div className=\"space-y-4\">\n//           {todos.map((todo) => (\n//             <TodoItem\n//               key={todo.id}\n//               todo={todo}\n//               onToggle={toggleComplete}\n//               onDelete={deleteTodo}\n//               onEdit={editTodo}\n//             />\n//           ))}\n//         </div>\n//         <div className=\"mt-6 text-sm text-slate-700 flex justify-between\">\n//           <span>📋 Total: {todos.length}</span>\n//           <span>✅ Completed: {completedCount}</span>\n//           <span>⏳ Pending: {pendingCount}</span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default TodoApp;","map":{"version":3,"names":[],"sources":["C:/Users/cheli/OneDrive/Desktop/Projects/todo-frontend/src/components/TodoApp.js"],"sourcesContent":["// // import React, { useState } from 'react';\r\n// // import TodoForm from './TodoForm';\r\n// // import TodoItem from './TodoItem';\r\n// // import { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\n// // function TodoApp() {\r\n// //   const [todos, setTodos] = useState([]);\r\n\r\n// //   const addTodo = (task) => {\r\n// //     setTodos([\r\n// //       ...todos,\r\n// //       {\r\n// //         id: Date.now(),\r\n// //         text: task.text,\r\n// //         priority: task.priority,\r\n// //         completed: false,\r\n// //       },\r\n// //     ]);\r\n// //   };\r\n// //   const navigate = useNavigate();\r\n\r\n// // const handleLogout = () => {\r\n// //   localStorage.removeItem(\"user\"); // optional: clear login state\r\n// //   navigate(\"/\"); // redirect to login page\r\n// // };\r\n\r\n\r\n// //   const toggleComplete = (id) => {\r\n// //     setTodos(todos.map((t) =>\r\n// //       t.id === id ? { ...t, completed: !t.completed } : t\r\n// //     ));\r\n// //   };\r\n\r\n// //   const deleteTodo = (id) => {\r\n// //     setTodos(todos.filter((t) => t.id !== id));\r\n// //   };\r\n\r\n// //   const editTodo = (id, updatedTask) => {\r\n// //     setTodos(todos.map((t) =>\r\n// //       t.id === id ? { ...t, text: updatedTask.text, priority: updatedTask.priority } : t\r\n// //     ));\r\n// //   };\r\n\r\n// //   const completedCount = todos.filter((t) => t.completed).length;\r\n// //   const pendingCount = todos.length - completedCount;\r\n\r\n// //   return (\r\n// //     <div className=\"min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 flex flex-col items-center px-4 py-10\">\r\n// //       <div className=\"bg-white/30 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-xl p-6 border border-slate-300\">\r\n// //         <h1 className=\"text-3xl font-semibold text-slate-800 mb-6 text-center\">🚀 Project Task Manager</h1>\r\n// //         <TodoForm onSubmit={addTodo} />\r\n// //         <div className=\"space-y-4\">\r\n// //           {todos.map((todo) => (\r\n// //             <TodoItem\r\n// //               key={todo.id}\r\n// //               todo={todo}\r\n// //               onToggle={toggleComplete}\r\n// //               onDelete={deleteTodo}\r\n// //               onEdit={editTodo}\r\n// //             />\r\n// //           ))}\r\n// //         </div>\r\n// //         <div className=\"mt-6 text-sm text-slate-700 flex justify-between\">\r\n// //           <span>📋 Total: {todos.length}</span>\r\n// //           <span>✅ Completed: {completedCount}</span>\r\n// //           <span>⏳ Pending: {pendingCount}</span>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default TodoApp;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import TodoForm from './TodoForm';\r\n// import TodoItem from './TodoItem';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function TodoApp() {\r\n//   const [todos, setTodos] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//   const userEmail = user?.email;\r\n\r\n//   // 🟡 Load todos on mount\r\n//   useEffect(() => {\r\n//     if (!userEmail) {\r\n//       navigate('/');\r\n//       return;\r\n//     }\r\n//     fetch(`http://localhost:8080/api/todos/${userEmail}`)\r\n//       .then((res) => res.json())\r\n//       .then((data) => setTodos(data))\r\n//       .catch((err) => {\r\n//         console.error('Failed to load todos:', err);\r\n//         alert('Failed to load todos.');\r\n//       });\r\n//   }, [userEmail, navigate]);\r\n\r\n//   // ✅ Add todo\r\n//   const addTodo = (task) => {\r\n//     const newTodo = {\r\n//       text: task.text,\r\n//       priority: task.priority,\r\n//       completed: false,\r\n//     };\r\n\r\n//     fetch(`http://localhost:8080/api/todos/${userEmail}`, {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(newTodo),\r\n//     })\r\n//       .then((res) => res.text())\r\n//       .then(() => {\r\n//         // Refresh list\r\n//         setTodos([...todos, { ...newTodo, id: Date.now() }]); // temp id\r\n//       });\r\n//   };\r\n\r\n//   // ✅ Toggle complete\r\n//   const toggleComplete = (id) => {\r\n//     const todo = todos.find((t) => t.id === id);\r\n//     const updated = { ...todo, completed: !todo.completed };\r\n\r\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\r\n//       method: 'PUT',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(updated),\r\n//     }).then(() =>\r\n//       setTodos(todos.map((t) => (t.id === id ? updated : t)))\r\n//     );\r\n//   };\r\n\r\n//   // ✅ Delete todo\r\n//   const deleteTodo = (id) => {\r\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\r\n//       method: 'DELETE',\r\n//     }).then(() => setTodos(todos.filter((t) => t.id !== id)));\r\n//   };\r\n\r\n//   // ✅ Edit todo\r\n//   const editTodo = (id, updatedTask) => {\r\n//     const updated = { ...todos.find((t) => t.id === id), ...updatedTask };\r\n\r\n//     fetch(`http://localhost:8080/api/todos/${id}`, {\r\n//       method: 'PUT',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(updated),\r\n//     }).then(() =>\r\n//       setTodos(todos.map((t) => (t.id === id ? updated : t)))\r\n//     );\r\n//   };\r\n\r\n//   const completedCount = todos.filter((t) => t.completed).length;\r\n//   const pendingCount = todos.length - completedCount;\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('user');\r\n//     navigate('/');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 flex flex-col items-center px-4 py-10\">\r\n//       <div className=\"bg-white/30 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-xl p-6 border border-slate-300\">\r\n//         <div className=\"flex justify-between items-center mb-6\">\r\n//           <h1 className=\"text-3xl font-semibold text-slate-800 text-center w-full\">🚀 Project Task Manager</h1>\r\n//           <button onClick={handleLogout} className=\"text-red-600 text-sm font-medium hover:underline absolute top-6 right-8\">\r\n//             Logout\r\n//           </button>\r\n//         </div>\r\n//         <TodoForm onSubmit={addTodo} />\r\n//         <div className=\"space-y-4\">\r\n//           {todos.map((todo) => (\r\n//             <TodoItem\r\n//               key={todo.id}\r\n//               todo={todo}\r\n//               onToggle={toggleComplete}\r\n//               onDelete={deleteTodo}\r\n//               onEdit={editTodo}\r\n//             />\r\n//           ))}\r\n//         </div>\r\n//         <div className=\"mt-6 text-sm text-slate-700 flex justify-between\">\r\n//           <span>📋 Total: {todos.length}</span>\r\n//           <span>✅ Completed: {completedCount}</span>\r\n//           <span>⏳ Pending: {pendingCount}</span>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TodoApp;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}